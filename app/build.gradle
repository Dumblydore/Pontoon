apply plugin: 'com.android.application'

apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'io.fabric'

def name = "0.9.0" // Default
def localProperties = new Properties()
localProperties.load(project.rootProject.file("local.properties").newDataInputStream())

if (System.getenv("isCi") == "true") {
    def schema = "release-v"
    def tag = ['sh', '-c', "git tag -l --sort version:refname \"${schema}*\" | tail -n 1"].execute().text.trim()
    if (tag != null && !tag.startsWith(schema)) throw new GradleException("Tag \'${tag}\' does not follow schema of \'${schema}x.x.x\'")
    if (tag != null) name = tag.replace(schema, "")
}

def major = (name.substring(0, name.indexOf("."))).toInteger()
def minor = (name.substring(name.indexOf(".") + 1, name.lastIndexOf("."))).toInteger()
def patch = (name.substring(name.lastIndexOf(".") + 1, name.length())).toInteger()
def build = System.getenv("buildNumber")
if (build == null) build = 0 else build = build.toInteger() % 1000

if (major > 209) throw new GradleException("Major version ${major} exceeds limit")
if (minor > 99) throw new GradleException("Minor version ${minor} exceeds limit")
if (patch > 99) throw new GradleException("Patch version ${patch} exceeds limit")

def code = (major * 10000000) + (minor * 100000) + (patch * 1000) + build

android {
    signingConfigs {
        release {
            keyAlias localProperties.getProperty("signing.keyAlias", "")
            keyPassword localProperties.getProperty("signing.keyPassword", "")
            storeFile file(localProperties.getProperty("signing.storeFile", "~/"))
            storePassword localProperties.getProperty("signing.storePassword", "")
        }
        nightly {
            keyAlias localProperties.getProperty("signing.keyAlias", "")
            keyPassword localProperties.getProperty("signing.keyPassword", "")
            storeFile file(localProperties.getProperty("signing.storeFile", "~/"))
            storePassword localProperties.getProperty("signing.storePassword", "")
        }
    }
    compileSdkVersion 28
    buildToolsVersion "28.0.0"
    defaultConfig {
        applicationId "me.mauricee.pontoon"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode code
        versionName "$name($build)"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue 'string', 'default_user', '""'
        resValue 'string', 'default_pass', '""'
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.release.pro'
            proguardFiles fileTree('proguard').asList().toArray()
            signingConfig signingConfigs.release
            pseudoLocalesEnabled true
        }
        nightly {
            minifyEnabled true
            signingConfig signingConfigs.nightly
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.nightly.pro'
            versionNameSuffix ' Nightly'
            applicationIdSuffix '.nightly'
        }
        debug {
            versionNameSuffix ' Debug'
            applicationIdSuffix '.debug'
            resValue 'string', 'default_user', "\"${localProperties.getProperty("pontoon.username", "")}\""
            resValue 'string', 'default_pass', "\"${localProperties.getProperty("pontoon.password", "")}\""
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //  Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //  Google
    implementation "androidx.core:core-ktx:$google_support_version"
    implementation "androidx.fragment:fragment-ktx:$google_support_version"
    implementation "androidx.preference:preference:$google_support_version"

    implementation "androidx.appcompat:appcompat:$google_support_version"
    implementation "androidx.recyclerview:recyclerview:$google_support_version"
    implementation "androidx.core:core:$google_support_version"
    implementation "androidx.media:media:$google_support_version"
    implementation "androidx.palette:palette:$google_support_version"
//    implementation "androidx.mediarouter:mediarouter:$google_support_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "com.google.android.material:material:$google_support_version"

    // use -ktx for Kotlin

    //    implementation "com.jakewharton.timber:timber:4.7.0"

    //    Google Play
    implementation 'com.google.firebase:firebase-core:16.0.3'
    implementation 'com.google.firebase:firebase-crash:16.2.0'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'

    //  UI
    implementation 'com.ncapdevi:frag-nav:2.4.0'
    implementation "com.mikepenz:aboutlibraries:6.2.0-rc01"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rx_binding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-design-kotlin:$rx_binding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rx_binding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rx_binding_version"

    //  RX
    implementation 'io.reactivex:rxkotlin:2.0.0-RC1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'

    //  Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    implementation("com.github.bumptech.glide:recyclerview-integration:$glide_version") {
        transitive = false
    }
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    //  Utils
    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.0'
    implementation('org.aaronhe:threetenbp-gson-adapter:1.0.2') {
        transitive = false
    }
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.android.exoplayer:exoplayer-core:$exo_player_version"
    implementation "com.google.android.exoplayer:extension-okhttp:$exo_player_version"
    implementation "com.google.android.exoplayer:extension-mediasession:$exo_player_version"
    implementation "com.google.android.exoplayer:exoplayer-hls:$exo_player_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    //  Architecture Components
    implementation "androidx.room:room-runtime:$arch_components_version"
    implementation "androidx.room:room-rxjava2:$arch_components_version"
    implementation "androidx.paging:paging-runtime:$arch_components_version"
    implementation "androidx.paging:paging-rxjava2:$arch_components_version"

    //   Networking
    implementation 'com.google.code.gson:gson:2.8.4'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    //  Tests
    testImplementation 'junit:junit:4.12'
    testImplementation "android.arch.persistence.room:testing:$arch_components_version"

    //  Android tests
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha3'

    //  Processors
    kapt "androidx.room:room-compiler:$arch_components_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
}

apply plugin: 'com.google.gms.google-services'