apply plugin: 'com.android.application'
apply plugin: 'dagger.hilt.android.plugin'

def applyAnalytics = (project.findProperty('enableAnalytics') ?: "false").equalsIgnoreCase("true")

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.jjohannes.missing-metadata-guava'
apply plugin: "androidx.navigation.safeargs"
//apply plugin: 'com.github.triplet.play'

if (applyAnalytics) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
    apply plugin: 'com.google.firebase.firebase-perf'
}


def major = 1
def minor = 1
def patch = (project.findProperty('buildNumber') ?: "0").toInteger()

Properties localProperties = new Properties()
localProperties.load(project.rootProject.file("local.properties").newDataInputStream())

android {
    compileSdkVersion build_versions.compile_sdk
    defaultConfig {
        applicationId "me.mauricee.pontoon"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode((major * 100) + (minor * 100) + patch)
        versionName "$major.$minor.$patch"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue 'string', 'default_user', "\"${localProperties.getProperty("pontoon.username", "")}\""
        resValue 'string', 'default_pass', "\"${localProperties.getProperty("pontoon.password", "")}\""
        resValue 'string', 'cast_id', "\"${localProperties.getProperty("pontoon.castId", "")}\""
        javaCompileOptions.annotationProcessorOptions.arguments['dagger.hilt.disableModulesHaveInstallInCheck'] = 'true'
    }
    buildFeatures {
        viewBinding true
    }
    signingConfigs {
        Release {
            keyAlias localProperties.getProperty("release.keyAlias", "")
            keyPassword localProperties.getProperty("release.keyPassword", "")
            storeFile file(localProperties.getProperty("release.storeFile", "~/"))
            storePassword localProperties.getProperty("release.storePassword", "")
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard').asList().toArray()
            resValue 'string', 'app_name', '"Pontoon"'
            resValue 'string', 'default_user', '""'
            resValue 'string', 'default_pass', '""'
            signingConfig signingConfigs.Release
            pseudoLocalesEnabled true
        }
        debug {
            resValue 'string', 'app_name', '"Pontoon Debug"'
            applicationIdSuffix ".debug"
            versionNameSuffix '-debug'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}


dependencies {
    //  Modules
    implementation project(":common:log")
    implementation project(":data:common")
    implementation project(":data:network")
    implementation project(":feature:login")
    implementation project(":repository")
    implementation project(":ui")

    //  Kotlin
    implementation deps.kotlin

    //  AndroidX
    implementation deps.androidx.activity
    implementation deps.androidx.appcompat
    implementation deps.androidx.core
    implementation deps.androidx.constraintlayout
    implementation deps.androidx.fragment
    implementation deps.androidx.lifecycle.common
    implementation deps.androidx.lifecycle.ext
    implementation deps.androidx.lifecycle.livedata
    implementation deps.androidx.lifecycle.viewmodel
    implementation deps.androidx.media2.session
    implementation deps.androidx.media2.player
    implementation deps.androidx.media2.widget
    implementation deps.androidx.mediarouter
    implementation deps.androidx.navigation.fragment
    implementation deps.androidx.navigation.ui
    implementation deps.androidx.palette
    implementation deps.androidx.preference
    implementation deps.androidx.startup
    implementation deps.androidx.recyclerview
    implementation deps.material

    //  Dagger
    api deps.dagger.core
    kapt deps.dagger.compiler

    api deps.dagger.hilt.core
    api deps.dagger.hilt.navigation
    kapt deps.dagger.hilt.compiler
    kapt deps.dagger.hilt.android_compiler

    // ExoPlayer
    implementation deps.exoplayer.exoplayer_core
    implementation deps.exoplayer.exoplayer_ui
    implementation deps.exoplayer.extension_okhttp
    implementation deps.exoplayer.extension_cast
    implementation deps.exoplayer.exoplayer_hls
    implementation deps.exoplayer.extension_media2

    //  Glide
    implementation deps.glide.core
    implementation deps.glide.okhttp
    implementation(deps.glide.recyclerview) { transitive = false }
    kapt deps.glide.compiler

    //  Google Play
    implementation deps.firebase.core
    implementation deps.firebase.crash
    implementation deps.firebase.crashlytics
    implementation deps.firebase.perf
    implementation deps.cast


    //   Networking
    implementation deps.okhttp.core
    implementation deps.okhttp.logging
    implementation deps.retrofit.core
    implementation deps.retrofit.moshi
    implementation deps.retrofit.rx
    implementation deps.retrofit.scalars
    implementation deps.wisefy

    //  RX
    implementation deps.rx.rx_java
    implementation deps.rx.rx_kotlin
    implementation deps.rx.android
    implementation deps.rx.relay
    implementation deps.rx.replaying_share

    implementation deps.rx.bindings.appcompat
    implementation deps.rx.bindings.binding
    implementation deps.rx.bindings.material
    implementation deps.rx.bindings.swiperefreshlayout

    //  UI
    implementation deps.about
    implementation deps.lazylayout

    //  Utils
    implementation deps.timber
    implementation deps.threeten

    //  Tests
    testImplementation deps.test.junit
    testImplementation deps.test.mockk

    //  Android tests
    androidTestImplementation deps.test.android.runner
    androidTestImplementation deps.test.android.espresso.core
}

if (project.hasProperty('kapt')) {
    // Reference for 'kapt' DSL: https://kotlinlang.org/docs/reference/kapt.html#java-compiler-options
    kapt {
        // we expect this closure to run over a org.jetbrains.kotlin.gradle.plugin.KaptExtension
        javacOptions {
            option("-source", "8")
            option("-target", "8")
        }
    }
}
